@page "/login"
@using Microsoft.AspNetCore.Components.Authorization
@using System.ComponentModel.DataAnnotations
@using ZaposliMe.Frontend.Services
@inject HttpClient Http
@inject NavigationManager Nav
@inject AuthenticationStateProvider AuthProvider

<h3>Login</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

<div class="container vh-100 d-flex justify-content-center align-items-center">
    <div class="card shadow-sm p-4" style="min-width: 360px; max-width: 400px;">
        <h3 class="text-center mb-4">Sign In</h3>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger" role="alert">@ErrorMessage</div>
        }

        <EditForm Model="model" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="email" class="form-label">Email address</label>
                <InputText @bind-Value="model.Email" id="email" class="form-control" placeholder="you@example.com" />
            </div>

            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <InputText @bind-Value="model.Password" id="password" type="password" class="form-control" placeholder="••••••••" />
            </div>

            <button type="submit" class="btn btn-primary w-100">Login</button>
        </EditForm>

        <div class="mt-3 text-center">
            <span>Don't have an account? <a href="/register">Register</a></span>
        </div>
    </div>
</div>

@code {
    private LoginModel model = new();
    private string ErrorMessage;

    private async Task HandleLogin()
    {
        var response = await Http.PostAsJsonAsync("login", model);
        if (response.IsSuccessStatusCode)
        {
            (AuthProvider as CookieAuthStateProvider)?.NotifyAuthChanged();
            Nav.NavigateTo("/");
        }
        else
        {
            ErrorMessage = "Invalid email or password.";
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; }
    }
}
