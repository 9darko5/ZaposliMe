@page "/employer/applications"
@using System.Net.Http.Json
@using ZaposliMe.Application.DTOs.Job
@using ZaposliMe.Domain.Enums
@attribute [Authorize(Roles = "Employer")]
@inject HttpClient Http

<h3 class="mb-3 d-flex justify-content-between align-items-center">
    My Applications
    <input class="form-control w-auto" placeholder="Search..." @bind="search" @bind:event="oninput" />
</h3>

@if (loading)
{
    <p><em>Loading…</em></p>
}
else if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <div class="alert alert-warning" role="alert">
        @errorMessage
    </div>
}
else if (apps is null || apps.Count == 0)
{
    <div class="alert alert-info">
        You have no applications yet.
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-hover table-striped align-middle">
            <thead class="table-light">
                <tr>
                    <th role="button" @onclick="() => SortBy(nameof(EmployerApplicationDto.JobTitle))">
                        Job @SortIcon(nameof(EmployerApplicationDto.JobTitle))
                    </th>
                    <th role="button" @onclick="() => SortBy(nameof(EmployerApplicationDto.EmployeeFullName))">
                        Employee @SortIcon(nameof(EmployerApplicationDto.EmployeeFullName))
                    </th>
                    <th role="button" @onclick="() => SortBy(nameof(EmployerApplicationDto.Status))">
                        Status @SortIcon(nameof(EmployerApplicationDto.Status))
                    </th>
                    <th role="button" @onclick="() => SortBy(nameof(EmployerApplicationDto.AppliedAt))">
                        Applied @SortIcon(nameof(EmployerApplicationDto.AppliedAt))
                    </th>
                    <th role="button" @onclick="() => SortBy(nameof(EmployerApplicationDto.JobCreatedAt))">
                        Job Created @SortIcon(nameof(EmployerApplicationDto.JobCreatedAt))
                    </th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var a in FilteredAndSorted())
                {
                    <tr>
                        <td>@a.JobTitle</td>
                        <td>@a.EmployeeFullName</td>
                        <td>
                            <span class="@StatusBadgeClass(a.Status)">@a.Status</span>
                        </td>
                        <td title="@a.AppliedAt?.ToString("u")">
                            @a.AppliedAt?.ToLocalTime().ToString("yyyy-MM-dd HH:mm")
                        </td>
                        <td title="@a.JobCreatedAt.ToString("u")">
                            @a.JobCreatedAt.ToLocalTime().ToString("yyyy-MM-dd HH:mm")
                        </td>
                        <td>@Truncate(a.JobDescription, 140)</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<EmployerApplicationDto>? apps;
    private bool loading = true;
    private string? errorMessage;
    private string search = "";

    // sorting
    private string sortBy = nameof(EmployerApplicationDto.AppliedAt);
    private bool sortAsc = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Call API
            var resp = await Http.GetAsync("/api/job/employerapplications");

            if (!resp.IsSuccessStatusCode)
            {
                // Friendly message without exposing server internals
                errorMessage = "We couldn’t load your applications at the moment. Please try again later.";
                return;
            }

            apps = await resp.Content.ReadFromJsonAsync<List<EmployerApplicationDto>>() ?? new();
        }
        catch (Exception e)
        {
            errorMessage = "A network or unexpected error occurred while loading applications.";
        }
        finally
        {
            loading = false;
        }
    }

    private IEnumerable<EmployerApplicationDto> FilteredAndSorted()
    {
        if (apps is null)
            yield break;

        IEnumerable<EmployerApplicationDto> q = apps;

        if (!string.IsNullOrWhiteSpace(search))
        {
            var s = search.Trim();
            q = q.Where(a =>
                (a.JobTitle?.Contains(s, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (a.EmployeeFullName?.Contains(s, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (a.JobDescription?.Contains(s, StringComparison.OrdinalIgnoreCase) ?? false) ||
                a.Status.ToString().Contains(s, StringComparison.OrdinalIgnoreCase)
            );
        }

        q = (sortBy, sortAsc) switch
        {
            (nameof(EmployerApplicationDto.JobTitle), true) => q.OrderBy(a => a.JobTitle),
            (nameof(EmployerApplicationDto.JobTitle), false) => q.OrderByDescending(a => a.JobTitle),

            (nameof(EmployerApplicationDto.EmployeeFullName), true) => q.OrderBy(a => a.EmployeeFullName),
            (nameof(EmployerApplicationDto.EmployeeFullName), false) => q.OrderByDescending(a => a.EmployeeFullName),

            (nameof(EmployerApplicationDto.Status), true) => q.OrderBy(a => a.Status),
            (nameof(EmployerApplicationDto.Status), false) => q.OrderByDescending(a => a.Status),

            (nameof(EmployerApplicationDto.JobCreatedAt), true) => q.OrderBy(a => a.JobCreatedAt),
            (nameof(EmployerApplicationDto.JobCreatedAt), false) => q.OrderByDescending(a => a.JobCreatedAt),

            // Default: AppliedAt
            (_, true) => q.OrderBy(a => a.AppliedAt),
            (_, false) => q.OrderByDescending(a => a.AppliedAt),
        };

        foreach (var item in q)
            yield return item;
    }

    private void SortBy(string column)
    {
        if (sortBy == column)
            sortAsc = !sortAsc;
        else
        {
            sortBy = column;
            sortAsc = true;
        }
    }

    private RenderFragment SortIcon(string column) => builder =>
    {
        var isActive = sortBy == column;
        var icon = !isActive ? "" : (sortAsc ? " ▲" : " ▼");
        builder.AddContent(0, icon);
    };

    private static string Truncate(string? text, int max)
    {
        if (string.IsNullOrEmpty(text))
            return "";

        return text.Length <= max ? text : text.Substring(0, max) + "…";
    }

    private static string StatusBadgeClass(ApplicationStatus status) => status switch
    {
        // dark backgrounds => make text white
        ApplicationStatus.InReview => "badge bg-secondary text-white",
        ApplicationStatus.Submitted => "badge bg-success text-white",
        ApplicationStatus.Rejected => "badge bg-danger text-white",

        // warning is light => keep dark text
        ApplicationStatus.Withdrawn => "badge bg-warning text-dark",

        _ => "badge bg-light text-dark"
    };
}