@page "/employer/applications"
@using System.Net.Http.Json
@using ZaposliMe.Application.DTOs.Job
@using ZaposliMe.Domain.Enums
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<ZaposliMe.Frontend.Resources.Resources> L
@inject HttpClient Http
@attribute [Authorize(Roles = "Employer")]

<h3 class="mb-3 d-flex justify-content-between align-items-center">
    @L["ApplicationsToMyJobs"]
    <input class="form-control w-auto" placeholder="@L["Search"]" @bind="search" @bind:event="oninput" />
</h3>

@if (loading)
{
    <p><em>Loading…</em></p>
}
else if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <div class="alert alert-warning" role="alert">
        @errorMessage
    </div>
}
else if (apps is null || apps.Count == 0)
{
    <div class="alert alert-info">@L["YouHaveNoApplicationsYet"]</div>
}
else
{
    <div class="table-responsive">
        <table class="table table-hover table-striped align-middle">
            <thead class="table-light">
                <tr>
                    <th role="button" @onclick="() => SortBy(nameof(EmployerApplicationDto.JobTitle))">
                        @L["Job"] @SortIcon(nameof(EmployerApplicationDto.JobTitle))
                    </th>
                    <th role="button" @onclick="() => SortBy(nameof(EmployerApplicationDto.EmployeeFullName))">
                        @L["Worker"] @SortIcon(nameof(EmployerApplicationDto.EmployeeFullName))
                    </th>
                    <th role="button" @onclick="() => SortBy(nameof(EmployerApplicationDto.Status))">
                        @L["State"] @SortIcon(nameof(EmployerApplicationDto.Status))
                    </th>
                    <th role="button" @onclick="() => SortBy(nameof(EmployerApplicationDto.AppliedAt))">
                        @L["Applied"] @SortIcon(nameof(EmployerApplicationDto.AppliedAt))
                    </th>
                    <th role="button" @onclick="() => SortBy(nameof(EmployerApplicationDto.JobCreatedAt))">
                        @L["JobCreated"] @SortIcon(nameof(EmployerApplicationDto.JobCreatedAt))
                    </th>
                    <th>@L["Description"]</th>
                    <th>@L["Actions"]</th> 
                </tr>
            </thead>
            <tbody>
                @foreach (var a in FilteredAndSorted())
                {
                    <tr>
                        <td>@a.JobTitle</td>
                        <td>@a.EmployeeFullName</td>
                        <td>
                            <span class="@StatusBadgeClass(a.Status)">@a.Status</span>
                        </td>
                        <td title="@a.AppliedAt?.ToString("u")">
                            @a.AppliedAt?.ToLocalTime().ToString("yyyy-MM-dd HH:mm")
                        </td>
                        <td title="@a.JobCreatedAt.ToString("u")">
                            @a.JobCreatedAt.ToLocalTime().ToString("yyyy-MM-dd HH:mm")
                        </td>
                        <td>@Truncate(a.JobDescription, 140)</td>
                        <td>
                            <button class="btn btn-sm btn-outline-primary me-2"
                                    @onclick='() => OpenModal(a, "details")'>
                                @L["Details"]
                            </button>

                            @if (a.Status == ApplicationStatus.InReview)
                            {
                                <button class="btn btn-sm btn-outline-success"
                                        @onclick='() => OpenModal(a, "decision")'>
                                    @L["ApproveReject"]
                                </button>
                            }
                        </td>

                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<!-- ✅ Modal -->
@if (showModal && selectedApp is not null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,.5)">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        @if (modalType == "details")
                        {
                            <span>@L["ApplicationDetails"]</span>
                        }
                        else
                        {
                            <span>@L["ApproveOrRejectApplication"]</span>
                        }
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    @if (modalType == "details")
                    {
                        <p><strong>@L["Job"]:</strong> @selectedApp.JobTitle</p>
                        <p><strong>@L["Applicant"]:</strong> @selectedApp.EmployeeFullName</p>
                        <p><strong>@L["Description"]:</strong> @selectedApp.JobDescription</p>
                        <p><strong>@L["State"]:</strong> <span class="@StatusBadgeClass(selectedApp.Status)">@selectedApp.Status</span></p>
                    }
                    else if (modalType == "decision")
                    {
                        <p>
                            @L["DoYou WantToApproveOrReject"] <strong>@selectedApp.EmployeeFullName</strong> @L["For"]
                            <strong>@selectedApp.JobTitle</strong>?
                        </p>

                        <div class="d-flex justify-content-end mt-3">
                            <button class="btn btn-success me-2" @onclick="() => Approve(selectedApp)">@L["Approve"]</button>
                            <button class="btn btn-danger me-2" @onclick="() => Reject(selectedApp)">@L["Reject"]</button>
                            <button class="btn btn-secondary" @onclick="CloseModal">@L["Cancel"]</button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<EmployerApplicationDto>? apps;
    private bool loading = true;
    private string? errorMessage;
    private string search = "";

    private string sortBy = nameof(EmployerApplicationDto.AppliedAt);
    private bool sortAsc = false;

    // ✅ Modal state
    private bool showModal = false;
    private EmployerApplicationDto? selectedApp;
    private string? modalType; // "details" or "decision"

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var resp = await Http.GetAsync("/api/job/employerapplications");

            if (!resp.IsSuccessStatusCode)
            {
                errorMessage = "We couldn’t load your applications at the moment. Please try again later.";
                return;
            }

            apps = await resp.Content.ReadFromJsonAsync<List<EmployerApplicationDto>>() ?? new();
        }
        catch
        {
            errorMessage = "A network or unexpected error occurred while loading applications.";
        }
        finally
        {
            loading = false;
        }
    }

    private IEnumerable<EmployerApplicationDto> FilteredAndSorted()
    {
        if (apps is null) yield break;

        IEnumerable<EmployerApplicationDto> q = apps;

        if (!string.IsNullOrWhiteSpace(search))
        {
            var s = search.Trim();
            q = q.Where(a =>
                (a.JobTitle?.Contains(s, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (a.EmployeeFullName?.Contains(s, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (a.JobDescription?.Contains(s, StringComparison.OrdinalIgnoreCase) ?? false) ||
                a.Status.ToString().Contains(s, StringComparison.OrdinalIgnoreCase)
            );
        }

        q = (sortBy, sortAsc) switch
        {
            (nameof(EmployerApplicationDto.JobTitle), true) => q.OrderBy(a => a.JobTitle),
            (nameof(EmployerApplicationDto.JobTitle), false) => q.OrderByDescending(a => a.JobTitle),
            (nameof(EmployerApplicationDto.EmployeeFullName), true) => q.OrderBy(a => a.EmployeeFullName),
            (nameof(EmployerApplicationDto.EmployeeFullName), false) => q.OrderByDescending(a => a.EmployeeFullName),
            (nameof(EmployerApplicationDto.Status), true) => q.OrderBy(a => a.Status),
            (nameof(EmployerApplicationDto.Status), false) => q.OrderByDescending(a => a.Status),
            (nameof(EmployerApplicationDto.JobCreatedAt), true) => q.OrderBy(a => a.JobCreatedAt),
            (nameof(EmployerApplicationDto.JobCreatedAt), false) => q.OrderByDescending(a => a.JobCreatedAt),
            (_, true) => q.OrderBy(a => a.AppliedAt),
            (_, false) => q.OrderByDescending(a => a.AppliedAt),
        };

        foreach (var item in q) yield return item;
    }

    private void SortBy(string column)
    {
        if (sortBy == column)
            sortAsc = !sortAsc;
        else
        {
            sortBy = column;
            sortAsc = true;
        }
    }

    private RenderFragment SortIcon(string column) => builder =>
    {
        var isActive = sortBy == column;
        var icon = !isActive ? "" : (sortAsc ? " ▲" : " ▼");
        builder.AddContent(0, icon);
    };

    private static string Truncate(string? text, int max)
        => string.IsNullOrEmpty(text) ? "" : (text.Length <= max ? text : text[..max] + "…");

    private static string StatusBadgeClass(ApplicationStatus status) => status switch
    {
        ApplicationStatus.InReview => "badge bg-secondary text-white",
        ApplicationStatus.Submitted => "badge bg-success text-white",
        ApplicationStatus.Rejected => "badge bg-danger text-white",
        ApplicationStatus.Withdrawn => "badge bg-warning text-dark",
        _ => "badge bg-light text-dark"
    };

    // ✅ Modal methods
    private void OpenModal(EmployerApplicationDto app, string type)
    {
        selectedApp = app;
        modalType = type;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        selectedApp = null;
        modalType = null;
    }

    private async Task Approve(EmployerApplicationDto app)
    {
        // Example API call (you can adjust endpoint)
        var response = await Http.PostAsJsonAsync($"/api/job/approveapplication", new ChangeApplicationStatusDto { ApplicationId = app.Id, JobId = app.JobId });
        if (response.IsSuccessStatusCode)
        {
            app.Status = ApplicationStatus.Submitted;
        }

        CloseModal();
    }

    private async Task Reject(EmployerApplicationDto app)
    {
        var response = await Http.PostAsJsonAsync($"/api/job/rejectapplication", new ChangeApplicationStatusDto { ApplicationId = app.Id, JobId = app.JobId });
        if (response.IsSuccessStatusCode)
        {
            app.Status = ApplicationStatus.Rejected;
        }

        CloseModal();
    }
}
