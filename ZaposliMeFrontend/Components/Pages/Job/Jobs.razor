@page "/jobs"
@using System.Globalization
@using Microsoft.AspNetCore.WebUtilities
@using ZaposliMe.Application.DTOs.Job
@using Microsoft.Extensions.Localization
@inject NavigationManager Nav
@inject IStringLocalizer<ZaposliMe.Frontend.Resources.Resources> L
@inject HttpClient Http

<h3 class="mb-3 d-flex justify-content-between align-items-center">
    @L["AvailableJobs"]
</h3>

<!-- FILTER BAR -->
<div class="card mb-3">
    <div class="card-body row g-2 align-items-end">
        <div class="col-12 col-md-3">
            <label class="form-label">@L["City"]</label>
            <select class="form-select" @bind="filterCityIdStr">
                <option value="">@L["All"]</option>
                @if (cities is not null)
                {
                    @foreach (var c in cities)
                    {
                        <option value="@c.Id.ToString()">@c.Name</option>
                    }
                }
            </select>
        </div>

        <div class="col-6 col-md-3">
            <label class="form-label">@L["PostedFrom"]</label>
            <input type="date"
                   class="form-control"
                   @bind-value="filterFrom"
                   @bind-value:format="yyyy-MM-dd" />
        </div>

        <div class="col-6 col-md-3">
            <label class="form-label">@L["PostedTo"]</label>
            <input type="date"
                   class="form-control"
                   @bind-value="filterTo"
                   @bind-value:format="yyyy-MM-dd" />
        </div>

        <div class="col-12 col-md-3 d-flex gap-2">
            <button class="btn btn-primary w-100" @onclick="ApplyFilters">@L["Filter"]</button>
            <button class="btn btn-outline-secondary" title="@L["Clear"]" @onclick="ClearFilters">
                @L["Clear"]
            </button>
        </div>
    </div>
</div>

@if (loading)
{
    <p><em>@L["Loading"]</em></p>
}
else if (jobs is null || jobs.Count == 0)
{
    <div class="alert alert-info">@L["NoJobsAvailable"]</div>
}
else
{
    <div class="row row-cols-1 row-cols-md-3 g-4">
        @foreach (var job in jobs)
        {
            <div class="col">
                <div class="card shadow-sm h-100">
                    <div class="card-body">
                        <h3 class="card-title">@job.Title</h3>
                        <p class="card-text">@job.Description</p>
                        <small class="text-muted">@L["Location"]: @job.CityName</small><br />
                        <small class="text-muted">@L["CreatedAt"]: @job.CreatedAt</small><br />
                        <small class="text-muted">@L["CreatedBy"]: @job.EmployerFullName</small>
                    </div>
                    <div class="card-footer d-flex justify-content-between">
                        <small class="text-muted">@L["WorkersNeeded"]: @job.NumberOfWorkers</small>
                        <div>
                            <AuthorizeView Roles="Employee">
                                <Authorized>
                                    <button class="btn btn-sm btn-primary me-1" @onclick="() => OpenApply(job)">@L["Apply"]</button>
                                </Authorized>
                            </AuthorizeView>
                            <AuthorizeView>
                                <NotAuthorized>
                                    <button class="btn btn-sm btn-primary me-1" @onclick="RedirectToLogin">@L["Apply"]</button>
                                </NotAuthorized>
                            </AuthorizeView>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

<ApplyJobModal Job="applyingJob" Show="showApplyModal" OnClose="CloseApply" OnConfirm="HandleApply" ShowError="applyError" />

@code {
    private List<JobDto>? jobs;
    private List<CityDto>? cities;

    // Filters
    private string? filterCityIdStr;   // keep city as string for easy empty/null handling in <select>
    private DateOnly? filterFrom;        // typed date
    private DateOnly? filterTo;          // typed date

    private bool loading;
    private JobDto? applyingJob;
    private bool showApplyModal;
    private bool applyError;

    protected override async Task OnInitializedAsync()
    {
        // Load cities for dropdown
        cities = await Http.GetFromJsonAsync<List<CityDto>>("https://localhost:7097/api/city/all");

        // Load filters from URL (deep-link/back support)
        var uri = new Uri(Nav.Uri);
        var dict = QueryHelpers.ParseQuery(uri.Query);

        if (dict.TryGetValue("cityId", out var cityStr))
            filterCityIdStr = string.IsNullOrWhiteSpace(cityStr) ? null : cityStr.ToString();

        if (dict.TryGetValue("from", out var fromStr)
            && DateOnly.TryParseExact(fromStr!, "yyyy-MM-dd", CultureInfo.InvariantCulture, DateTimeStyles.None, out var f))
            filterFrom = f;

        if (dict.TryGetValue("to", out var toStr)
            && DateOnly.TryParseExact(toStr!, "yyyy-MM-dd", CultureInfo.InvariantCulture, DateTimeStyles.None, out var t))
            filterTo = t;

        await LoadJobs();
    }

    private async Task LoadJobs()
    {
        loading = true;
        StateHasChanged();

        var baseUrl = "https://localhost:7097/api/job/all";
        var query = new Dictionary<string, string>();

        if (!string.IsNullOrWhiteSpace(filterCityIdStr))
            query["cityId"] = filterCityIdStr!;

        if (filterFrom is DateOnly df)
            query["from"] = df.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);

        if (filterTo is DateOnly dt)
            query["to"] = dt.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);

        var url = query.Count > 0 ? QueryHelpers.AddQueryString(baseUrl, query) : baseUrl;

        jobs = await Http.GetFromJsonAsync<List<JobDto>>(url);

        loading = false;
    }

    private async Task ApplyFilters()
    {
        // Sync filters to page URL (shareable/bookmarkable)
        var query = new Dictionary<string, string>();

        if (!string.IsNullOrWhiteSpace(filterCityIdStr))
            query["cityId"] = filterCityIdStr!;

        if (filterFrom is DateOnly df)
            query["from"] = df.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);

        if (filterTo is DateOnly dt)
            query["to"] = dt.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);

        var newUri = query.Count > 0
            ? QueryHelpers.AddQueryString("/jobs", query)
            : "/jobs";

        Nav.NavigateTo(newUri, forceLoad: false);
        await LoadJobs();
    }

    private async Task ClearFilters()
    {
        filterCityIdStr = null;
        filterFrom = null;
        filterTo = null;

        Nav.NavigateTo("/jobs", forceLoad: false);
        await LoadJobs();
    }

    private void OpenApply(JobDto job)
    {
        applyingJob = job;
        showApplyModal = true;
    }

    private void CloseApply()
    {
        showApplyModal = false;
        applyingJob = null;
        applyError = false;
    }

    private async Task HandleApply(JobDto job)
    {
        var response = await Http.PostAsJsonAsync("https://localhost:7097/api/job/apply", job);

        if (response.IsSuccessStatusCode)
        {
            await LoadJobs(); // keep current filters
        }
        else
        {
            applyError = true;
            StateHasChanged();
        }

        CloseApply();
    }

    private void RedirectToLogin()
    {
        var returnUrl = Uri.EscapeDataString(Nav.Uri);
        Nav.NavigateTo($"/login?returnUrl={returnUrl}", forceLoad: true);
    }
}
