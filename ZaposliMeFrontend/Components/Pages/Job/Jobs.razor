@page "/jobs"
@using ZaposliMe.Application.DTOs.Job
@using Microsoft.Extensions.Localization
@using ZaposliMe.Frontend.Components.Shared
@inject NavigationManager Nav
@inject IStringLocalizer<ZaposliMe.Frontend.Resources.Resources> L
@inject HttpClient Http

<h3 class="mb-4 d-flex justify-content-between align-items-center">
    @L["AvailableJobs"]
</h3>

@if (jobs == null)
{
    <p><em>@L["Loading"]</em></p>
}
else if (!jobs.Any())
{
    <p>@L["NoJobsAvailable"]</p>
}
else
{
    <div class="row row-cols-1 row-cols-md-3 g-4">
        @foreach (var job in jobs)
        {
            <div class="col">
                <div class="card shadow-sm h-100">
                    <div class="card-body">
                        <h3 class="card-title">@job.Title</h3>
                        <p class="card-text">@job.Description</p>
                        <small class="text-muted">@L["Location"]: @job.CityName</small><br />
                        <small class="text-muted">@L["CreatedAt"]: @job.CreatedAt</small><br />
                        <small class="text-muted">@L["CreatedBy"]: @job.EmployerFullName</small>
                    </div>
                    <div class="card-footer d-flex justify-content-between">
                        <small class="text-muted">@L["WorkersNeeded"]: @job.NumberOfWorkers</small>
                        <div>
                            <AuthorizeView Roles="Employee">
                                <Authorized>
                                    <button class="btn btn-sm btn-primary me-1"
                                            @onclick="() => OpenApply(job)">
                                        @L["Apply"]
                                    </button>
                                </Authorized>
                            </AuthorizeView>

                            <AuthorizeView>
                                <NotAuthorized>
                                    <button class="btn btn-sm btn-primary me-1"
                                            @onclick="() => RedirectToLogin()">
                                        @L["Apply"]
                                    </button>
                                </NotAuthorized>
                            </AuthorizeView>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

<ApplyJobModal Job="applyingJob" Show="showApplyModal" OnClose="CloseApply" OnConfirm="HandleApply" ShowError="applyError" />

@code {
    private List<JobDto>? jobs;

    private JobDto? editingJob;
    private JobDto? deletingJob;
    private JobDto? applyingJob;

    private bool showEditModal = false;
    private bool showDeleteModal = false;
    private bool showApplyModal = false;
    private bool isAdding = false;
    private bool applyError;

    protected override async Task OnInitializedAsync()
    {
        jobs = await Http.GetFromJsonAsync<List<JobDto>>("https://localhost:7097/api/job/all");
    }

    private void OpenAdd()
    {
        editingJob = new JobDto
        {
            // ensure CityId exists on DTO
            CityId = null,
            NumberOfWorkers = 1
        };
        isAdding = true;
        showEditModal = true;
    }

    private void OpenApply(JobDto job)
    {
        applyingJob = job;
        showApplyModal = true;
    }

    private void CloseApply()
    {
        showApplyModal = false;
        applyingJob = null;
        applyError = false;
    }

    private async Task HandleApply(JobDto job)
    {
        var response = await Http.PostAsJsonAsync("https://localhost:7097/api/job/apply", job);

        if (response.IsSuccessStatusCode)
        {
            jobs = await Http.GetFromJsonAsync<List<JobDto>>("https://localhost:7097/api/job/all");
        }
        else
        {
            applyError = true;
            StateHasChanged();
        }

        CloseApply();
    }

    private void RedirectToLogin()
    {
        var returnUrl = Uri.EscapeDataString(Nav.Uri);
        Nav.NavigateTo($"/login?returnUrl={returnUrl}", forceLoad: true);
    }
}
