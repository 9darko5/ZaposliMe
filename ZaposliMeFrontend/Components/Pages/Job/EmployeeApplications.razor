@page "/employee/applications"
@using System.Net.Http.Json
@using ZaposliMe.Application.DTOs.Job
@using ZaposliMe.Domain.Enums
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<ZaposliMe.Frontend.Resources.Resources> L
@inject HttpClient Http
@attribute [Authorize(Roles = "Employee")]

<h3 class="mb-3 d-flex justify-content-between align-items-center">
    @L["MyApplications"]
    <input class="form-control w-auto" placeholder="@L["Search"]" @bind="search" @bind:event="oninput" />
</h3>

@if (loading)
{
    <p><em>@L["Loading"]</em></p>
}
else if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <div class="alert alert-warning" role="alert">@errorMessage</div>
}
else if (apps is null || apps.Count == 0)
{
    <div class="alert alert-info">@L["YouHaveNoApplicationsYet"]</div>
}
else
{
    <div class="table-responsive">
        <table class="table table-hover table-striped align-middle">
            <thead class="table-light">
                <tr>
                    <th role="button" @onclick="() => SortBy(nameof(UserApplicationDto.JobTitle))">
                        @L["Job"] @SortIcon(nameof(UserApplicationDto.JobTitle))
                    </th>
                    <th role="button" @onclick="() => SortBy(nameof(UserApplicationDto.EmployerFullName))">
                        @L["Employer"] @SortIcon(nameof(UserApplicationDto.EmployerFullName))
                    </th>
                    <th role="button" @onclick="() => SortBy(nameof(UserApplicationDto.Status))">
                        @L["State"] @SortIcon(nameof(UserApplicationDto.Status))
                    </th>
                    <th role="button" @onclick="() => SortBy(nameof(UserApplicationDto.AppliedAt))">
                        @L["Applied"] @SortIcon(nameof(UserApplicationDto.AppliedAt))
                    </th>
                    <th role="button" @onclick="() => SortBy(nameof(UserApplicationDto.JobCreatedAt))">
                        @L["JobCreated"] @SortIcon(nameof(UserApplicationDto.JobCreatedAt))
                    </th>
                    <th>@L["Description"]</th>
                    <th>@L["Actions"]</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var a in FilteredAndSorted())
                {
                    <tr>
                        <td>@a.JobTitle</td>
                        <td>@a.EmployerFullName</td>
                        <td>
                            <span class="@StatusBadgeClass(a.Status)">@a.Status</span>
                        </td>
                        <td title="@a.AppliedAt.ToString("u")">
                            @a.AppliedAt.ToLocalTime().ToString("yyyy-MM-dd HH:mm")
                        </td>
                        <td title="@a.JobCreatedAt.ToString("u")">
                            @a.JobCreatedAt.ToLocalTime().ToString("yyyy-MM-dd HH:mm")
                        </td>
                        <td>@Truncate(a.JobDescription, 140)</td>
                        <td>
                            @if (a.Status == ApplicationStatus.Submitted || a.Status == ApplicationStatus.InReview)
                            {
                                <button class="btn btn-sm btn-outline-danger"
                                        @onclick="() => ConfirmWithdraw(a)">
                                    @L["Withdraw"]
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-sm btn-outline-secondary" disabled>@L["Withdraw"]</button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<!-- Withdraw confirmation modal -->
@if (showWithdrawModal && selectedApplication != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content shadow">
                <div class="modal-header">
                    <h5 class="modal-title">@L["ConfirmWithdraw"]</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <p>
                        @L["AreYouSureYouWantWithdrawApplication"]
                        <strong>@selectedApplication.JobTitle</strong>?
                    </p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseModal">@L["Cancel"]</button>
                    <button class="btn btn-danger" @onclick="WithdrawApplication">@L["Withdraw"]</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<UserApplicationDto>? apps;
    private bool loading = true;
    private string? errorMessage;
    private string search = "";

    private bool showWithdrawModal = false;
    private UserApplicationDto? selectedApplication;

    // sorting
    private string sortBy = nameof(UserApplicationDto.AppliedAt);
    private bool sortAsc = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var resp = await Http.GetAsync("/api/job/userapplications");

            if (!resp.IsSuccessStatusCode)
            {
                errorMessage = "We couldn’t load your applications at the moment. Please try again later.";
                return;
            }

            apps = await resp.Content.ReadFromJsonAsync<List<UserApplicationDto>>() ?? new();
        }
        catch
        {
            errorMessage = "A network or unexpected error occurred while loading applications.";
        }
        finally
        {
            loading = false;
        }
    }

    private void ConfirmWithdraw(UserApplicationDto app)
    {
        selectedApplication = app;
        showWithdrawModal = true;
    }

    private void CloseModal()
    {
        selectedApplication = null;
        showWithdrawModal = false;
    }

    private async Task WithdrawApplication()
    {
        if (selectedApplication is null)
            return;

        try
        {
            var resp = await Http.PostAsJsonAsync($"/api/job/withdrawapplication", new ChangeApplicationStatusDto { ApplicationId = selectedApplication.Id, JobId = selectedApplication.JobId });
            if (resp.IsSuccessStatusCode)
            {
                // Update local status so the UI refreshes immediately
                selectedApplication.Status = ApplicationStatus.Withdrawn;
            }
            else
            {
                errorMessage = "Failed to withdraw application. Please try again.";
            }
        }
        catch
        {
            errorMessage = "Network or server error occurred while withdrawing application.";
        }
        finally
        {
            CloseModal();
        }
    }

    private IEnumerable<UserApplicationDto> FilteredAndSorted()
    {
        if (apps is null) yield break;

        IEnumerable<UserApplicationDto> q = apps;

        if (!string.IsNullOrWhiteSpace(search))
        {
            var s = search.Trim();
            q = q.Where(a =>
                (a.JobTitle?.Contains(s, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (a.EmployerFullName?.Contains(s, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (a.JobDescription?.Contains(s, StringComparison.OrdinalIgnoreCase) ?? false) ||
                a.Status.ToString().Contains(s, StringComparison.OrdinalIgnoreCase)
            );
        }

        q = (sortBy, sortAsc) switch
        {
            (nameof(UserApplicationDto.JobTitle), true) => q.OrderBy(a => a.JobTitle),
            (nameof(UserApplicationDto.JobTitle), false) => q.OrderByDescending(a => a.JobTitle),
            (nameof(UserApplicationDto.EmployerFullName), true) => q.OrderBy(a => a.EmployerFullName),
            (nameof(UserApplicationDto.EmployerFullName), false) => q.OrderByDescending(a => a.EmployerFullName),
            (nameof(UserApplicationDto.Status), true) => q.OrderBy(a => a.Status),
            (nameof(UserApplicationDto.Status), false) => q.OrderByDescending(a => a.Status),
            (nameof(UserApplicationDto.JobCreatedAt), true) => q.OrderBy(a => a.JobCreatedAt),
            (nameof(UserApplicationDto.JobCreatedAt), false) => q.OrderByDescending(a => a.JobCreatedAt),
            (_, true) => q.OrderBy(a => a.AppliedAt),
            (_, false) => q.OrderByDescending(a => a.AppliedAt),
        };

        foreach (var item in q)
            yield return item;
    }

    private void SortBy(string column)
    {
        if (sortBy == column)
            sortAsc = !sortAsc;
        else
        {
            sortBy = column;
            sortAsc = true;
        }
    }

    private RenderFragment SortIcon(string column) => builder =>
    {
        var isActive = sortBy == column;
        var icon = !isActive ? "" : (sortAsc ? " ▲" : " ▼");
        builder.AddContent(0, icon);
    };

    private static string Truncate(string? text, int max)
    {
        if (string.IsNullOrEmpty(text)) return "";
        return text.Length <= max ? text : text.Substring(0, max) + "…";
    }

    private static string StatusBadgeClass(ApplicationStatus status) => status switch
    {
        ApplicationStatus.InReview => "badge bg-secondary text-white",
        ApplicationStatus.Submitted => "badge bg-success text-white",
        ApplicationStatus.Rejected => "badge bg-danger text-white",
        ApplicationStatus.Withdrawn => "badge bg-warning text-dark",
        _ => "badge bg-light text-dark"
    };
}
