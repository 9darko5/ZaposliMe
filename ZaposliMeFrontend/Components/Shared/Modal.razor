@* Generic Bootstrap modal component *@
@if (Show)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,.5)">
        <div class="modal-dialog @DialogSizeClass">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@Title</h5>
                    <button type="button" class="btn-close" @onclick="OnCancelClicked"></button>
                </div>
                <div class="modal-body">
                    @Body
                </div>
                @if (ShowFooter)
                {
                    <div class="modal-footer">
                        @Footer
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    /// <summary>
    /// Controls visibility of the modal.
    /// </summary>
    [Parameter] public bool Show { get; set; }

    /// <summary>
    /// Title displayed in the modal header.
    /// </summary>
    [Parameter] public string? Title { get; set; }

    /// <summary>
    /// Main body content.
    /// </summary>
    [Parameter] public RenderFragment? Body { get; set; }

    /// <summary>
    /// Optional footer content (buttons, etc.).
    /// </summary>
    [Parameter] public RenderFragment? Footer { get; set; }

    /// <summary>
    /// If false, the footer is hidden.
    /// </summary>
    [Parameter] public bool ShowFooter { get; set; } = true;

    /// <summary>
    /// Triggered when user clicks the close (X) button.
    /// </summary>
    [Parameter] public EventCallback OnCancel { get; set; }

    /// <summary>
    /// Size variant: "sm", "lg", "xl", default normal.
    /// </summary>
    [Parameter] public string? Size { get; set; }

    private string DialogSizeClass =>
        Size?.ToLowerInvariant() switch
        {
            "sm" => "modal-sm",
            "lg" => "modal-lg",
            "xl" => "modal-xl",
            _ => ""
        };

    private async Task OnCancelClicked()
    {
        if (OnCancel.HasDelegate)
            await OnCancel.InvokeAsync();
    }
}
